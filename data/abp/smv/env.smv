MODULE main
VAR
  PHONY: boolean;
  REQ: boolean;
  tmr: timer;
  sndr: CONTROL_0(REQ, tmr.timeout, bwdc.o0, bwdc.o1, PHONY);
  fwdc: channel(sndr.p0, sndr.p1);
  rcvr: CONTROL_1(fwdc.o0, REQ, fwdc.o1, PHONY);
  bwdc: channel(rcvr.a0, rcvr.a1);
ASSIGN
  PHONY := FALSE;
  REQ := TRUE;

-- Safety

-- `send` and `deliver` occur in the right order
LTLSPEC
  -- `deliver` can only happen after `send`
  -- sndr.send R !rcvr.deliver
  !(!sndr.send U rcvr.deliver)
LTLSPEC
  -- two `send`s cannot occur in a row without a `deliver` in between
  G (sndr.send -> X !(!rcvr.deliver U sndr.send))

-- `deliver` and `done` occur in the right order
LTLSPEC
  -- `done` can only happen after `deliver`
  -- rcvr.deliver R !sndr.done
  !(!rcvr.deliver U sndr.done)
LTLSPEC
  -- two `deliver`s cannot occur in a row without a `done` in between
  G (rcvr.deliver -> X !(!sndr.done U rcvr.deliver))

-- Liveness

LTLSPEC
  (G F tmr.timeout) -> (G F fwdc.i0 -> G F fwdc.o0) -> (G F fwdc.i1 -> G F fwdc.o1) -> (G F bwdc.i0 -> G F bwdc.o0) -> (G F bwdc.i1 -> G F bwdc.o1) -> G (sndr.send -> F rcvr.deliver)

LTLSPEC
  (G F tmr.timeout) -> (G F fwdc.i0 -> G F fwdc.o0) -> (G F fwdc.i1 -> G F fwdc.o1) -> (G F bwdc.i0 -> G F bwdc.o0) -> (G F bwdc.i1 -> G F bwdc.o1) -> G (sndr.send -> F sndr.done)

LTLSPEC
  (G F tmr.timeout) -> (G F fwdc.i0 -> G F fwdc.o0) -> (G F fwdc.i1 -> G F fwdc.o1) -> (G F bwdc.i0 -> G F bwdc.o0) -> (G F bwdc.i1 -> G F bwdc.o1) -> G F sndr.send

MODULE timer
VAR
  timeout: boolean;
ASSIGN
  init(timeout) := FALSE;
  next(timeout) := case
                     !timeout : FALSE union TRUE;
                     timeout : FALSE;
                   esac;

MODULE channel(i0, i1)
VAR
  state : {empty, stored0, stored1, release0, release1};
  o0 : boolean;
  o1 : boolean;
ASSIGN
  init(state) := empty;
  next(state) := case
                   state = empty & i0 : {empty, stored0};
                   state = empty & i1 : {empty, stored1};
                   state = stored0 : {stored0, release0};
                   state = stored1 : {stored1, release1};
                   state = release0 : empty;
                   state = release1 : empty;
                   TRUE : state;
                 esac;

  init(o0) := FALSE;
  next(o0) := case
                state = stored0 : TRUE;
                state = release0 : FALSE;
                TRUE : o0;
              esac;

  init(o1) := FALSE;
  next(o1) := case
                state = stored1 : TRUE;
                state = release1 : FALSE;
                TRUE : o1;
              esac;
